Running x11perf on a device with 408 MHz memory clock.
ShadowFB disabled in tests with patch.

G2D FillRect performance:

1920x1080x32bpp@60Hz

                   rect10   rect100   rect500
G2D sunxifb        987000   18300     775
G2D fb-style fill  994000   11800     684
G2D EXA-style fill 764000   16900     682

With kernel compile in background:
                   rect10   rect100   rect500
G2D sunxifb        448000    8990     381
G2D fb-style fill  459000   10700     640

Running a CPU-intensive benchmark with x11perf -rect500 running concurrently:

                         user  real
G2D sunxifb              20.2  40.6
G2D fb-style fill        21.1  22.4

1280x720x32bpp@60Hz

                   rect10   rect100   rect500
No FillRect        911000   23200     898
fb-style v0.7     1010000   12400     717
EXA-style v0.7     881000   17700     713

At 32bpp the patch slightly decreases Fill throughput on an idle
system when EXA-style fill is used. On a system with load, the greatly reduced
CPU utilization results in both higher fill throughput and faster execution
of the background processes. However, at lower resolutions/refresh, CPU fill
takes more advantage of the extra available memory bandwidth than G2D fill.

1920x1080x16bpp@60Hz

                  rect10   rect100   rect500
G2D sunxifb       916000   44400     2140
fb-style fill    1030000   44600     1300
EXA-style fill    985000   63700     1290

1280x720x16bpp@60Hz

No FillRect      1060000   53400     2410
fb-style v0.7    1150000   53800     1310
EXA-style v0.7    977000   74400     1290

At 16bpp, fill throughput with the patch when G2D fill is triggered (rect500)
is lower than CPU fill. At lower resolutions/refresh rate, the gap becomes even bigger
due to fill-rate limitations of the G2D engine. On a system with load, the G2D fill
should close the gap somewhat. For rect100 EXA performance using CPU (pixman) is higher
due to the overlapping region optimization that the EXA-style implementation performs.

G2D CopyArea performance:

1920x1080x32bpp@60Hz

                  scroll10 scroll100 scroll500 copywin10 copywin100 copywin500
G2D sunxifb       39200    8110      477       41600     8230       571
G2D with patch    87100    8110      478       55400     8220       570

Using software blit instead of G2D for small sizes improves performance.

1920x1080x16bpp@60Hz

                  scroll10 scroll100 scroll500 copywin10 copywin100 copywin500
G2D sunxifb                11000     738                 10900      734
G2D with patch    92000    12200     1240      67500     12000      887

Using "double-speed" blits at 16bpp using 32bpp mode increases throughput,
especially for large areas.

G2D PutImage performance. Because x11perf -shmput triggers the CopyArea path
instead of the PutImage path, we use benchimagemark:

1920x1080, 60 Hz

512x512, Mpix/s
                           XPutImage XShmPutImage Pixmap SHM
16bpp, non optimized       16.90     33.28        53.38
16bpp, optimized PutImage  18.46     51.11        51.00
32bpp, non optimized       14.57     27.84        40.03
32bpp, optimized PutImage  17.77     40.22        40.76

200x200

16bpp, non-optimized       19.35     28.38        36.60
16bpp, optimized PutImage  17.08     38.30        40.43
32bpp, non-optimized       13.46     25.59        33.23
32bpp, optimized PutImage  15.36     34.04        34.34

1280x720, 60 Hz

512x512

16bpp, non-optimized       16.89     34.51        57.95
16bpp, optimized PutImage  21.30     57.50        57.52
32bpp, non-optimized       16.36     31.68        50.13
32bpp, optimized PutImage  19.28     50.67        50.81
Without filling the off-screen area every iteration:
16bpp, non-optimized       18.17     39.04        73.14
16bpp, optimized PutImage  22.35     70.44        70.41

200x200

16bpp, non-optimized       16.71     29.76        42.26
16bpp, optimized PutImage  19.59     39.71        39.86
32bpp, non-optimized       15.03     28.19        38.78
32bpp, optimized PutImage  24.22     35.64        36.31
Without filling the off-screen area every iteration:
16bpp, non-optimized       17.32     23.06        47.38
16bpp, optimized PutImage  21.82     49.61        50.23

XPutImage and especially XShmPutImage throughput is clearly
higher with the optimized PutImage implementation using
pixman. The difference is even more pronounced when the off
screen area isn't filled every iteration. Shared memory
pixmaps are not affected.

