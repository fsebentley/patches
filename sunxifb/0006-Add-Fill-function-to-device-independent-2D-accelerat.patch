From 266387e514d36ca8b94f239ca10fe982bdb283a0 Mon Sep 17 00:00:00 2001
From: Harm Hanemaaijer <fgenfb@yahoo.com>
Date: Sat, 25 May 2013 01:39:12 +0200
Subject: [PATCH 1/3] Add Fill function to device-independent 2D acceleration
 interface

This patch adds a fill function to the device-independent blt2d_i
structure in interfaces.h. In the CPU backend, the fill function
is initialized with noop. In the G2D backend, the fill function
is initialized with the G2D fill function. In the sunxi G2D backend
(sunxi_disp.c), add a G2D fill function that supports both 16bpp
and 32bpp. In the X driver (sunxi_x_g2d.c), the private fill
function is initialized with the blt2d fill function. It not used
yet.

Signed-off-by: Harm Hanemaaijer <fgenfb@yahoo.com>
---
 src/cpu_backend.c |   15 ++++++++++
 src/interfaces.h  |    9 ++++++
 src/sunxi_disp.c  |   80 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/sunxi_disp.h  |   18 ++++++++++++
 src/sunxi_x_g2d.c |    1 +
 src/sunxi_x_g2d.h |    9 ++++++
 6 files changed, 132 insertions(+)

diff --git a/src/cpu_backend.c b/src/cpu_backend.c
index 20dbda5..f3191f6 100644
--- a/src/cpu_backend.c
+++ b/src/cpu_backend.c
@@ -182,6 +182,20 @@ overlapped_blt_noop(void     *self,
     return 0;
 }
 
+static int
+fill_noop(uint32_t       *bits,
+          int                 stride,
+          int                 bpp,
+          int                 x,
+          int                 y,
+          int                 width,
+          int                 height,
+          uint32_t            color)
+{
+    return 0;
+}
+
+
 cpu_backend_t *cpu_backend_init(uint8_t *uncached_buffer,
                                 size_t   uncached_buffer_size)
 {
@@ -194,6 +208,7 @@ cpu_backend_t *cpu_backend_init(uint8_t *uncached_buffer,
 
     ctx->blt2d.self = ctx;
     ctx->blt2d.overlapped_blt = overlapped_blt_noop;
+    ctx->blt2d.fill = fill_noop;
 
     ctx->cpuinfo = cpuinfo_init();
 
diff --git a/src/interfaces.h b/src/interfaces.h
index 5c4beb1..8dee3c8 100644
--- a/src/interfaces.h
+++ b/src/interfaces.h
@@ -45,6 +45,15 @@ typedef struct {
                           int       dst_y,
                           int       w,
                           int       h);
+    int (*fill)(void               *self,
+                uint32_t           *bits,
+                int                 stride,
+                int                 bpp,
+                int                 x,
+                int                 y,
+                int                 width,
+                int                 height,
+                uint32_t            color);
 } blt2d_i;
 
 #endif
diff --git a/src/sunxi_disp.c b/src/sunxi_disp.c
index 246eb37..6cea165 100644
--- a/src/sunxi_disp.c
+++ b/src/sunxi_disp.c
@@ -147,6 +147,7 @@ sunxi_disp_t *sunxi_disp_init(const char *device, void *xserver_fbmem)
 
     ctx->blt2d.self = ctx;
     ctx->blt2d.overlapped_blt = sunxi_g2d_blt;
+    ctx->blt2d.fill = sunxi_g2d_fill;
 
     return ctx;
 }
@@ -536,6 +537,85 @@ int sunxi_g2d_fill_r5g6b5_in_three(sunxi_disp_t *disp,
     return 0;
 }
 
+/*
+ * G2D counterpart for pixman_fill (function arguments are the same with
+ * only sunxi_disp_t extra argument added). Supports 16bpp (r5g6b5) and
+ * 32bpp (a8r8g8b8) formats.
+ *
+ * Can do G2D accelerated fills only if both source and destination
+ * buffers are inside framebuffer. Returns FALSE (0) otherwise.
+ */
+
+int sunxi_g2d_fill(void               *self,
+                   uint32_t           *bits,
+                   int                 stride,
+                   int                 bpp,
+                   int                 x,
+                   int                 y,
+                   int                 w,
+                   int                 h,
+                   uint32_t            color)
+{
+    sunxi_disp_t *disp = (sunxi_disp_t *)self;
+    int blt_size_threshold;
+    g2d_fillrect tmp;
+    /*
+     * Very minimal validation here. We just assume that if the begginging
+     * of the destination images belongs to the framebuffer,
+     * then the images is entirely residing inside the framebuffer.
+     */
+    if ((uint8_t *)bits < disp->framebuffer_addr ||
+        (uint8_t *)bits >= disp->framebuffer_addr + disp->framebuffer_size)
+    {
+        return 0;
+    }
+
+    if (w <= 0 || h <= 0)
+        return 1;
+
+    /*
+     * If the area is smaller than G2D_FILL_SIZE_THRESHOLD, prefer to avoid the
+     * overhead of G2D and do a CPU fill instead. There are seperate thresholds
+     * for 16 and 32bpp.
+     */
+    if (bpp == 16)
+        blt_size_threshold = G2D_FILL_SIZE_THRESHOLD_16BPP;
+    else
+        blt_size_threshold = G2D_FILL_SIZE_THRESHOLD_32BPP;
+    if (w * h < blt_size_threshold)
+        return 0;
+
+    if (disp->fd_g2d < 0)
+        return 0;
+
+    tmp.flag                = G2D_FIL_NONE;
+    tmp.dst_image.addr[0]   = disp->framebuffer_paddr +
+                              ((uint8_t *)bits - disp->framebuffer_addr);
+    if (bpp == 32) {
+        tmp.dst_image.w         = stride;
+        tmp.dst_image.format    = G2D_FMT_ARGB_AYUV8888;
+        tmp.dst_image.pixel_seq = G2D_SEQ_NORMAL;
+        tmp.color               = color;
+    }
+    else if (bpp == 16) {
+        tmp.dst_image.w         = stride * 2;
+        tmp.dst_image.format    = G2D_FMT_RGB565;
+        tmp.dst_image.pixel_seq = G2D_SEQ_P10;
+        /* We have to convert the color to RGB888 format. */
+        tmp.color               = ((color & 0x001F) << 3) | ((color & 0x07E0) << 5) |
+                                  ((color & 0xF800) << 8);
+    }
+    tmp.dst_image.h         = y + h;
+    tmp.dst_rect.x          = x;
+    tmp.dst_rect.y          = y;
+
+    tmp.dst_rect.w          = w;
+    tmp.dst_rect.h          = h;
+    tmp.alpha               = 0;
+
+    return ioctl(disp->fd_g2d, G2D_CMD_FILLRECT, &tmp) == 0;
+}
+
 int sunxi_g2d_blit_a8r8g8b8(sunxi_disp_t *disp,
                             int           dst_x,
                             int           dst_y,
diff --git a/src/sunxi_disp.h b/src/sunxi_disp.h
index c9146c2..e8020a1 100644
--- a/src/sunxi_disp.h
+++ b/src/sunxi_disp.h
@@ -131,6 +131,24 @@ int sunxi_g2d_blit_a8r8g8b8(sunxi_disp_t *disp,
                             int           src_y,
                             int           w,
                             int           h);
+/*
+ * The following constants are used in sunxi_disp.c and represent
+ * the area threshold for falling back to CPU fill.
+ */
+#define G2D_FILL_SIZE_THRESHOLD_32BPP 10000
+#define G2D_FILL_SIZE_THRESHOLD_16BPP 50000
+
+/* G2D counterpart for pixmanfill with the support for 16bpp and 32bpp */
+int sunxi_g2d_fill(void               *disp,
+                   uint32_t           *bits,
+                   int                 stride,
+                   int                 bpp,
+                   int                 x,
+                   int                 y,
+                   int                 width,
+                   int                 height,
+                   uint32_t            color);
+
 
 /*
  * The following constants are used sunxi_disp.c and represent
diff --git a/src/sunxi_x_g2d.c b/src/sunxi_x_g2d.c
index 41d83f7..16a7370 100644
--- a/src/sunxi_x_g2d.c
+++ b/src/sunxi_x_g2d.c
@@ -339,6 +339,7 @@ SunxiG2D *SunxiG2D_Init(ScreenPtr pScreen, blt2d_i *blt2d)
     /* Cache the pointers from blt2d_i here */
     private->blt2d_self = blt2d->self;
     private->blt2d_overlapped_blt = blt2d->overlapped_blt;
+    private->blt2d_fill = blt2d->fill;
 
     /* Wrap the current CopyWindow function */
     private->CopyWindow = pScreen->CopyWindow;
diff --git a/src/sunxi_x_g2d.h b/src/sunxi_x_g2d.h
index d58e25d..e79cdb4 100644
--- a/src/sunxi_x_g2d.h
+++ b/src/sunxi_x_g2d.h
@@ -47,6 +47,15 @@ typedef struct {
                                 int       dst_y,
                                 int       w,
                                 int       h);
+    int (*blt2d_fill)(void     *self,
+                uint32_t *bits,
+                int       stride,
+                int       bpp,
+                int       x,
+                int       y,
+                int       width,
+                int       height,
+                uint32_t  color);
 } SunxiG2D;
 
 SunxiG2D *SunxiG2D_Init(ScreenPtr pScreen, blt2d_i *blt2d);
-- 
1.7.10.4

